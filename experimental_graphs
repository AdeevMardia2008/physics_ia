import matplotlib.pyplot as plt
import numpy as np

tension = np.array([1.9838, 2.2774, 2.5108, 2.8397, 3.1889, 3.5584, 3.9481, 4.4636, 5.0108, 5.7092, 6.3260, 7.1079, 8.0777])
decay_rate = np.array([0.446, 0.495, 0.519, 0.527, 0.565, 0.618, 0.638, 0.660, 0.704, 0.774, 0.776, 0.860, 0.886])
uncertainty_percent = 0.0566127
tension_uncertainty = tension * uncertainty_percent
decay_rate_uncertainty = decay_rate * uncertainty_percent

plt.figure(figsize=(10, 6))
plt.errorbar(tension, decay_rate, xerr=tension_uncertainty, yerr=decay_rate_uncertainty, fmt='o', color='blue', ecolor='black', capsize=3, label='Data with uncertainties')

def sqrt_func(x, a, b):
    return a * np.sqrt(x) + b

def fit_sqrt(x_data, y_data):
    X = np.column_stack((np.sqrt(x_data), np.ones_like(x_data)))
    a, b = np.linalg.lstsq(X, y_data, rcond=None)[0]
    return a, b

a, b = fit_sqrt(tension, decay_rate)
x_curve = np.linspace(min(tension), max(tension), 100)
y_curve = sqrt_func(x_curve, a, b)

plt.plot(x_curve, y_curve, color='red', linestyle='-',
         label=f'Best fit: y = {a:.4f}√x + {b:.4f}')

plt.xlabel('Tension (N)', fontsize=12)
plt.ylabel('Decay Rate (s⁻¹)', fontsize=12)
plt.title('Decay Rate vs. Tension (with uncertainties)', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()

y_pred = sqrt_func(tension, a, b)
ss_total = np.sum((decay_rate - np.mean(decay_rate))**2)
ss_residual = np.sum((decay_rate - y_pred)**2)
r_squared = 1 - (ss_residual / ss_total)
rmse = np.sqrt(np.mean((decay_rate - y_pred) ** 2))
nrmse = rmse / (max(decay_rate) - min(decay_rate))

print(f"R² value: {r_squared:.4f}")
print(f"Best fit square root model: y = {a:.4f}√x + {b:.4f}")
print(f"NRMSE: {nrmse:.4f}")






tension = np.array([1.9838, 2.2774, 2.5108, 2.8397, 3.1889, 3.5584, 3.9481, 4.4636, 5.0108, 5.7092, 6.3260, 7.1079, 8.0777])
decay_rate = np.array([0.446, 0.495, 0.519, 0.527, 0.565, 0.618, 0.638, 0.660, 0.704, 0.774, 0.776, 0.860, 0.886])
sqrt_tension = np.sqrt(tension)
uncertainty_percent = 0.0566127
sqrt_tension_uncertainty = sqrt_tension * uncertainty_percent
decay_rate_uncertainty = decay_rate * uncertainty_percent

plt.figure(figsize=(10, 6))
plt.errorbar(sqrt_tension, decay_rate, xerr=sqrt_tension_uncertainty, yerr=decay_rate_uncertainty, fmt='o', color='blue', ecolor='black', capsize=3, label='Data with uncertainties')

coefficients = np.polyfit(sqrt_tension, decay_rate, 1)
m, c = coefficients
x_line = np.linspace(min(sqrt_tension), max(sqrt_tension), 100)
y_line = m * x_line + c

plt.plot(x_line, y_line, color='red', linestyle='-', label=f'Best fit: y = {m:.4f}x + {c:.4f}')

plt.xlabel('√Tension (√N)', fontsize=12)
plt.ylabel('Decay Rate (s⁻¹)', fontsize=12)
plt.title('Decay Rate vs. Square Root of Tension (with uncertainties)', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()

y_pred = m * sqrt_tension + c
ss_total = np.sum((decay_rate - np.mean(decay_rate)) ** 2)
ss_residual = np.sum((decay_rate - y_pred) ** 2)
r_squared = 1 - (ss_residual / ss_total)
rmse = np.sqrt(np.mean((decay_rate - y_pred) ** 2))
nrmse = rmse / (max(decay_rate) - min(decay_rate))

print(f"R² value: {r_squared:.4f}")
print(f"Best fit linear model: y = {m:.4f}x + {c:.4f}")
print(f"NRMSE: {nrmse:.4f}")
