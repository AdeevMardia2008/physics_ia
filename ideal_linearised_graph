import matplotlib.pyplot as plt
import numpy as np

tension = [1.9838, 2.2774, 2.5108, 2.8397, 3.1889, 3.5584, 3.9481, 4.4636, 5.0108, 5.7092, 6.3260, 7.1079, 8.0777]
def ideal_decay(t):
    return 0.3047 * np.sqrt(t) + 0.0223

decay_rate = [ideal_decay(t) for t in tension]
sqrt_tension = [np.sqrt(t) for t in tension]
coefficients = np.polyfit(sqrt_tension, decay_rate, 1)
m, c = coefficients
x_line = np.linspace(min(sqrt_tension), max(sqrt_tension), 100)
y_line = m * x_line + c

plt.figure(figsize=(10, 6))
plt.scatter(sqrt_tension, decay_rate, color='blue', marker='o', label='Ideal Data')
plt.plot(x_line, y_line, color='red', linestyle='-', label=f'Best fit: y = {m:.4f}x + {c:.4f}')
plt.xlabel('√Tension (√N)', fontsize=12)
plt.ylabel('Decay Rate (s⁻¹)', fontsize=12)
plt.title('Ideal Decay Rate vs. √Tension', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()

y_mean = np.mean(decay_rate)
ss_total = sum((y - y_mean) ** 2 for y in decay_rate)
ss_residual = sum((y - (m * x + c)) ** 2 for x, y in zip(sqrt_tension, decay_rate))
r_squared = 1 - (ss_residual / ss_total)
rmse = np.sqrt(ss_residual / len(decay_rate))
range_y = max(decay_rate) - min(decay_rate)
nrmse = rmse / range_y

print(f"R² value: {r_squared:.4f}")
print(f"Best fit linear model: y = {m:.4f}x + {c:.4f}")
print(f"NRMSE: {nrmse:.8f}")
